<configuration debug="false">
    <!-- JUL/JDK14 to Logback bridge -->
    <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
    </contextListener>

    <appender name="STDOUT-COLOR" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>TRACE</level>
        </filter>
        <encoder>
            <pattern>%yellow(%d) [%magenta(%X{traceId})] [%thread] %highlight(%-5level) %cyan(%logger{36}) %marker - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="STDOUT-PLAIN" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>TRACE</level>
        </filter>
        <encoder>
            <pattern>%d [%X{traceId}] [%X{callerId}] [%thread] %-5level %logger{36} %marker - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- Service Log (Rollover every 50MB, max 11 logs) -->
    <appender name="SERVICE-FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.service.output:-service.log}</file>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>TRACE</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${log.service.output:-service.log}.%i</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>10</maxIndex>
        </rollingPolicy>

        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>50MB</maxFileSize>
        </triggeringPolicy>

        <encoder>
            <pattern>%d [%X{traceId}] [%X{callerId}] [%thread] %-5level %logger{36} %marker - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- Access Log (Rollover every 50MB, max 11 logs) -->
    <appender name="ACCESS-FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.access.output:-access.log}</file>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${log.access.output:-access.log}.%i</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>10</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>50MB</maxFileSize>
        </triggeringPolicy>
        <encoder>
            <pattern>%msg %X{traceId}%n</pattern>
        </encoder>
    </appender>


    <!-- ===================================================== -->
    <!-- Primary Async Appenders -->
    <!-- ===================================================== -->

    <property name="async_queue_size" value="${log.async.queue.size:-1024}"/>
    <property name="async_max_flush_time" value="${log.async.max.flush.time:-0}"/>

    <appender name="ASYNC-SERVICE" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>${async_queue_size}</queueSize>
        <maxFlushTime>${async_max_flush_time}</maxFlushTime>
        <appender-ref ref="SERVICE-FILE"/>
    </appender>

    <appender name="ASYNC-ACCESS" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>${async_queue_size}</queueSize>
        <maxFlushTime>${async_max_flush_time}</maxFlushTime>
        <appender-ref ref="ACCESS-FILE"/>
    </appender>

    <!-- Per-Package Config -->
    <logger name="com.twitter" level="INFO"/>
    <logger name="com.amazonaws" level="ERROR"/>
    <logger name="dispatch" level="WARN"/>
    <logger name="org.apache.http.*" level="INFO"/>
    <logger name="org.reflections.Reflections" level="ERROR"/>

    <root level="${log.level:-INFO}">
        <!-- turn off Loggly for local logging or when disabled intentionally -->
        <if condition='p("loggly.enabled").toLowerCase().equals("true")'>
            <then>
                <appender-ref ref="LOGGLY"/>
            </then>
        </if>

        <appender-ref ref="ASYNC-SERVICE"/>

        <!-- Configure stdout logging. Default to colorized option -->
        <if condition='isDefined("logging.no-colors")'>
            <then>
                <appender-ref ref="STDOUT-PLAIN"/>
            </then>
            <else>
                <appender-ref ref="STDOUT-COLOR"/>
            </else>
        </if>
    </root>

    <!-- Access Logging -->
    <logger name="com.twitter.finatra.http.filters.AccessLoggingFilter"
            level="INFO"
            additivity="false">
        <appender-ref ref="ASYNC-ACCESS"/>
    </logger>

    <!-- DB Log (Rollover every 50MB, max 11 logs) -->
    <appender name="DB-FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.db.output:-db.log}</file>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${log.db.output:-db.log}.%i</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>10</maxIndex>
        </rollingPolicy>

        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>50MB</maxFileSize>
        </triggeringPolicy>

        <encoder>
            <pattern>%d [%X{traceId}] [%X{callerId}] [%thread] %-5level %logger{36} %marker - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- Slick Logging -->
    <!-- Additivity set to false so we don't propagate to root appenders -->
    <logger name="slick.jdbc.DriverDataSource"              additivity="false" level="${log.slick.jdbc.driverDataSource:-info}">
        <appender-ref ref="DB-FILE" />
    </logger>
    <logger name="slick.jdbc.JdbcBackend.statement"         additivity="false" level="${log.slick.jdbc.statement:-debug}">
        <appender-ref ref="DB-FILE" />
    </logger>
    <logger name="slick.jdbc.JdbcBackend.parameter"         additivity="false" level="${log.slick.jdbc.parameter:-debug}">
        <appender-ref ref="DB-FILE" />
    </logger>
    <logger name="slick.jdbc.JdbcBackend.benchmark"         additivity="false" level="${log.slick.jdbc.benchmark:-debug}">
        <appender-ref ref="DB-FILE" />
    </logger>
    <logger name="slick.jdbc.StatementInvoker.result"       additivity="false" level="${log.slick.jdbc.result:-info}">
        <appender-ref ref="DB-FILE" />
    </logger>
    <logger name="slick.jdbc.JdbcModelBuilder"              additivity="false" level="${log.slick.createModel:-info}">
        <appender-ref ref="DB-FILE" />
    </logger>
    <logger name="slick.relational.ResultConverterCompiler" additivity="false" level="${log.slick.resultConverter:-inherited}">
        <appender-ref ref="DB-FILE" />
    </logger>
    <logger name="slick.util.AsyncExecutor"                 additivity="false" level="${log.slick.util.asyncExecutor:-inherited}">
        <appender-ref ref="DB-FILE" />
    </logger>
</configuration>